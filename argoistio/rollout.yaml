apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: argoistio-rollout
  namespace: default
  labels:
    app: demoistio
spec:
  replicas: 4
  selector:
    matchLabels:
      app: demoistio
  template:
    metadata:
      labels:
        app: demoistio
    spec:
      containers:
      - name: demo
        # https://github.com/argoproj/rollouts-demo
        # Available images colors are: red, orange, yellow, green, blue, purple (e.g. argoproj/rollouts-demo:yellow). Also available are:
        # High error rate images, prefixed with the word bad (e.g. argoproj/rollouts-demo:bad-yellow)
        # High latency images, prefixed with the word slow (e.g. argoproj/rollouts-demo:slow-yellow)
        image: argoproj/rollouts-demo:blue
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
  strategy:
    # which strategy to use (blueGreen, canary..)
    canary:
    # this part represents all the steps during an update.
      # add an analysis to validate the changes
      analysis:
        templates:
        # name of AnalysisTemplate
        - templateName: success-rate
        # When it begins (after the 1-minute pause)
        startingStep: 2
        args:
        - name: service-name
          # name of the canary service (used in prometheus to find the correct metrics)
          value: demo-canary.default
      steps:
    # we send at the beginning of the new release 20% of the traffic to the canary release.
    # To do that, Argo CD will update the weight of Istio's VirtualService.
      - setWeight: 20
    # Then we wait 1min to generate some traffic on the canary release.
      - pause:
          duration: "1m"
    # After 1 min, we send 50% of the traffic to the canary release.
      - setWeight: 50
    # Then we wait again 2min
      - pause:
          duration: "2m"
    # At the end if no more step is present, 
    # Argo will send 100% of the traffic to the canary release.
      stableService: demo # represents our main clusterIP service.
      canaryService: demo-canary # represents our canary clusterIP service.
      trafficRouting:
        istio:
           virtualService: 
            name: istio-vs
            routes:
            - primary 
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: default
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    successCondition: result[0] >= 0.95
    interval: 30s
    failureLimit: 1
    provider:
      prometheus:
        address: http://prometheus.istio-system:9090
        query: |
          sum(irate(
            istio_requests_total{reporter="source",destination_service=~"^{{args.service-name}}.*",response_code!~"5.*"}[1m]
          )) / 
          sum(irate(
            istio_requests_total{reporter="source",destination_service=~"^{{args.service-name}}.*"}[1m]
          ))